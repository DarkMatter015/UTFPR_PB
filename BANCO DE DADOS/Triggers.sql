--EXEMPLOS DE TRIGGERS

--Exemplo 1
--Criar uma TRIGGER que evite que sejam inseridos novos clientes na tabela CLIENTES (banco de dados BANCOS)
--em que o campo codcidade seja igual a 1 ou 2. Essa TRIGGER ser? criada para a a??o INSERT.

-- CRIA??O DA TRIGGER 

CREATE or alter TRIGGER TG_Permite_UF
		ON CLIENTE
		FOR INSERT
		AS	
		IF EXISTS (SELECT * 
			       FROM INSERTED 
			       WHERE CODCIDADE IN (1,2))
    		   BEGIN
			PRINT 'INSERÇÃO DE REGISTRO CANCELADA.'
 		 	PRINT 'ESTADO (UF) PROIBIDO!!'
			ROLLBACK
    		   END
		ELSE
			PRINT 'ESTADO PERMITIDO!'



-- TESTANDO O FUNCIONAMENTO DA TRIGGER
INSERT INTO CLIENTE 
VALUES (1302980112, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',1)

INSERT INTO CLIENTE
VALUES (1302980112, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',3)

-- Exemplo 2
--Vamos supor que, por ordem da administra??o n?o seja permitido fazer altera??es e 
--inser??es na tabela BANCOS. Para garantir esta norma implemente um trigger que 
--dispare em resposta a comandos UPDATE e INSERT na tabela BANCOS. Esta trigger 
--deve emitir um aviso de que as altera??es e inser??es foram suspensas e registrar 
--em uma tabela o nome do usu?rio que tentou fazer a altera??o e o nome do BANCO 
--que tentou-se alterar ou inserir.

-- CRIA??O DA TABELA PARA REGISTRAR TENTATIVAS DE INSER??O, ALTERA??O E DELE??O

SELECT * FROM BANCO
DROP TABLE LOG_BANCO

CREATE TABLE LOG_BANCO
( 
  		CODBANCO INT NOT NULL,
		NOME VARCHAR (50) NOT NULL,
		RUA VARCHAR(50) NOT NULL,
		NUMERO INT NOT NULL,
		BAIRRO VARCHAR (50) NOT NULL,
		COMPLEMENTO VARCHAR (10),
		CODCIDADE INT NOT NULL,
  		OPERACAO CHAR(1) NOT NULL,
		HORARIOLOG DATETIME NOT NULL,
		USUARIO CHAR (30) NOT NULL
)
DROP TRIGGER TG_LOG_BANCO
-- CRIA??O DA TRIGGER
CREATE or alter TRIGGER TG_LOG_BANCO
ON BANCO
FOR INSERT, UPDATE, DELETE
AS
-- VARIAVEIS QUE SER?O UTILIZADAS NA TRIGGER
DECLARE @CODBANCO INT,
		@NOME VARCHAR(50),
		@RUA VARCHAR(50),
		@NUMERO INT,
		@BAIRRO VARCHAR(50),
		@COMPLEMENTO VARCHAR(10),
		@CODCIDADE INT;

-- VERIFICA SE FOI FEITA ALGUMA ALTERA??O (UPDATE)
IF EXISTS (SELECT * FROM DELETED) AND EXISTS (SELECT * FROM INSERTED)
   BEGIN
	SELECT @CODBANCO = CODBANCO, 
	       @NOME = NOME, 
		   @RUA = RUA, 
		   @NUMERO = NUMERO, 
		   @BAIRRO = BAIRRO,
		   @COMPLEMENTO = COMPLEMENTO,
		   @CODCIDADE = CODCIDADE FROM DELETED
	--ROLLBACK
	INSERT INTO LOG_BANCO
	VALUES (@CODBANCO,@NOME,@RUA, @NUMERO, @BAIRRO, @COMPLEMENTO, @CODCIDADE,'U',GETDATE(),CURRENT_USER)
	SELECT @CODBANCO = CODBANCO, 
	       @NOME = NOME, 
		   @RUA = RUA, 
		   @NUMERO = NUMERO, 
		   @BAIRRO = BAIRRO,
		   @COMPLEMENTO = COMPLEMENTO,
		   @CODCIDADE = CODCIDADE FROM INSERTED
	PRINT 'VOC? ALTEROU DADOS DE UM BANCO'
	--ROLLBACK
	INSERT INTO LOG_BANCO
	VALUES (@CODBANCO,@NOME,@RUA, @NUMERO, @BAIRRO, @COMPLEMENTO, @CODCIDADE,'U',GETDATE(),CURRENT_USER)
   END
-- VERIFICA SE FOI FEITA ALGUMA INSER??O (INSERT)
IF NOT EXISTS (SELECT * FROM DELETED) AND EXISTS (SELECT * FROM INSERTED)
   BEGIN
	SELECT @CODBANCO = CODBANCO, 
	       @NOME = NOME, 
		   @RUA = RUA, 
		   @NUMERO = NUMERO, 
		   @BAIRRO = BAIRRO,
		   @COMPLEMENTO = COMPLEMENTO,
		   @CODCIDADE = CODCIDADE FROM INSERTED
	PRINT 'VOC? INSERIU DADOS DE UM BANCO'
	--ROLLBACK
	INSERT INTO LOG_BANCO
	VALUES (@CODBANCO,@NOME,@RUA, @NUMERO, @BAIRRO, @COMPLEMENTO, @CODCIDADE,'I',GETDATE(),CURRENT_USER) 	

   END

-- VERIFICA SE FOI FEITA ALGUMA DELE??O (DELETE)
IF EXISTS (SELECT * FROM DELETED) AND NOT EXISTS (SELECT * FROM INSERTED)
   BEGIN
	SELECT @CODBANCO = CODBANCO, 
	       @NOME = NOME, 
		   @RUA = RUA, 
		   @NUMERO = NUMERO, 
		   @BAIRRO = BAIRRO,
		   @COMPLEMENTO = COMPLEMENTO,
		   @CODCIDADE = CODCIDADE FROM DELETED
	PRINT 'VOC? DELETOU DADOS DE UM BANCO'
	--ROLLBACK
	INSERT INTO LOG_BANCO
	VALUES (@CODBANCO,@NOME,@RUA, @NUMERO, @BAIRRO, @COMPLEMENTO, @CODCIDADE,'D',GETDATE(),CURRENT_USER) 	
END


-- TESTANDO O FUNCIONAMENTO DA TRIGGERS COM INSERT
INSERT INTO BANCO
VALUES ('TESTE 2','TESTE TRIGGER',10, 'TESTE', 'TESTE',1)
SELECT * FROM BANCO

-- TESTANDO O FUNCIONAMENTO DA TRIGGERS COM UPDATE
UPDATE BANCO SET NOME = 'TESTE sal brow' WHERE CODBANCO = 6

DELETE FROM BANCO WHERE CODBANCO = 2006

-- VERIFICANDO O QUE FOI INSERIDO NA TABELA DE LOG
SELECT * FROM LOG_BANCO


-- EXEMPLO 3
--Crie uma TRIGGER calcule (DATA ATUAL MAIS 3 DIAS) e insira a data de devolu??o prevista na tabela EMPRESTIMO_DEVOLUCAO 
--sempre que um DVD for emprestado

CREATE TABLE EMPRESTIMO_DEVOLUCAO
(
	COD_EMPRESTIMO_DEVOLUCAO INT CONSTRAINT PK_EMPRESTIMO_DEVOLUCAO PRIMARY KEY IDENTITY(1,1),
	TITULO VARCHAR(100) NOT NULL,
	DATA_EMP DATETIME  NOT NULL,
	DATA_DEV_PREV DATETIME  NOT NULL,
	DATA_DEV DATETIME
)

-- CRIA??O DA TRIGGER
CREATE or alter TRIGGER TG_CALCULA_DATA_EMPRESTIMO_DEVOLUCAO
ON EMPRESTIMO_DEVOLUCAO
FOR INSERT 
AS 
IF EXISTS (SELECT * FROM INSERTED)
    BEGIN	
	      UPDATE EMPRESTIMO_DEVOLUCAO
	      SET DATA_DEV_PREV =  DATEADD(DD,3,DATA_EMP)
    END

-- TESTANDO A TRIGGER
INSERT INTO EMPRESTIMO_DEVOLUCAO
VALUES ('TESTE TRIGGER', GETDATE(),GETDATE(),NULL)

-- VERIFICANDO O FUNCIONAMENTO DA TRIGGER

SELECT * FROM EMPRESTIMO_DEVOLUCAO


-- EXEMPLO 4
--DESABILITANDO TRIGGER
ALTER TABLE EMPRESTIMO_DEVOLUCAO
DISABLE TRIGGER TG_CALCULA_DATA_EMPRESTIMO_DEVOLUCAO
ALTER TABLE CLIENTES
DISABLE TRIGGER TG_Permite_UF
 
-- HABILITANDO TRIGGER
ALTER TABLE EMPRESTIMO_DEVOLUCAO
ENABLE TRIGGER TG_CALCULA_DATA_EMPRESTIMO_DEVOLUCAO


--EXEMPLO 5
--Criar uma TRIGGER que evite que sejam inseridos novos clientes na tabela CLIENTES (banco de dados BANCOS)
--em que o campo codcidade seja igual a 1 ou 2. Essa TRIGGER ser? criada para a a??o INSERT.
-- IGUAL EXEMPLO 1, POR?M ESTA ? ISTEAD OF

CREATE TRIGGER TG_Permite_UF_TESTE
ON CLIENTES
INSTEAD of insert
AS	
IF EXISTS (SELECT * 
			FROM INSERTED 
			WHERE CODCIDADE IN (1,2))
    	BEGIN
	PRINT 'INSER??O DE REGISTRO CANCELADA.'
 	PRINT 'ESTADO (UF) PROIBIDO!!'
	ROLLBACK
    	END
ELSE
	PRINT 'ESTADO PERMITIDO!'

--TESTANDO A TRIGGER
INSERT INTO CLIENTES 
VALUES (13098980112, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',1)

INSERT INTO CLIENTES 
VALUES (13098980112, 'TESTE_TRIGGER','TESTE_TRIGGER','456', 'TESTE_TRIGGER', 'TESTE',3)

